name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Setup Vulkan SDK
      uses: edvn0/setup-vulkan-sdk@v1.3.0
      with:
       vulkan-query-version: 1.3.224.1
       vulkan-components: Vulkan-Headers, Vulkan-Loader, Glslang 
       vulkan-use-cache: true

    - name: Test Vulkan SDK Install
      shell: bash
      run: |
        echo "Vulkan SDK Version=='$VULKAN_SDK_VERSION'"
        echo "VULKAN_SDK=='$VULKAN_SDK'"
        glslangValidator --version

    - name: Download GLM Library ad Move GLM Library to Vulkan SDK Folder
      run: |
        VULKAN_SDK_PATH="$VULKAN_SDK"
        GLM_VERSION="0.9.9.8" # Set the GLM version you want to download
        GLM_DOWNLOAD_URL="https://github.com/g-truc/glm/archive/${GLM_VERSION}.zip"
        GLM_DIR="$VULKAN_SDK_PATH/Include/glm/"

        mkdir -p $GLM_TEMP_DIR
        curl -L -o glm.zip $GLM_DOWNLOAD_URL
        unzip glm.zip -d $GLM_DIR

        # Create the glm folder in the Vulkan SDK directory

      shell: bash
    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
